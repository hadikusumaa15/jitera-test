version: 0.2
env:
  variables:
    IMAGE_NAME: "recipes_development_web"
  parameter-store:
    docker_username: "/recipes_development/docker_username"
    docker_password: "/recipes_development/docker_password"
    subnet: "/recipes_development/subnet"
    security_group: "/recipes_development/security_group"

phases:
  install:
    runtime-versions:
      docker: 18
  pre_build:
    commands:
      - echo --- Logging in to Amazon ECR ---
      - $(aws ecr get-login --no-include-email --region ${AWS_DEFAULT_REGION})
      - echo --- Setting AWS environments ---
      - echo --- Docker Login ---
      - echo $docker_password | docker login --username $docker_username --password-stdin
      - AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
      - URI=${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${IMAGE_NAME}
  build:
    commands:
      - echo --- Building container ---
      - docker build -f ./docker/development/Dockerfile -t $URI:latest .
      - docker push $URI:latest
      - echo --- Migrating database ---
      - echo --- Migrating database ECS task ---
      - |
        aws ecs run-task --cluster recipes_development --task-definition recipes_development_db_setup --count 1 --launch-type FARGATE --network-configuration "awsvpcConfiguration={subnets=[${subnet}],securityGroups=[${security_group}], assignPublicIp=ENABLED}"
      - printf '{"Version":"1.0","ImageURI":"%s"}' $URI:latest > imageDetail.json
      - echo ----Update Sidekiq/SSH Force Deploy with new image ---
      - aws ecs update-service --cluster "recipes_development" --service "recipes_development_sidekiq"  --task-definition "recipes_development_sidekiq"  --force-new-deployment
      - echo ----End Sidekiq/SSH Force Deploy with new image ---

artifacts:
  files:
    - imageDetail.json
    - ecs/development/taskdef.json
    - ecs/development/appspec.yaml
